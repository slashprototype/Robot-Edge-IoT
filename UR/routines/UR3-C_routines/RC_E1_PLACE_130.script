def RC_E1_PLACE_130():
  # Global parameters:
  global speed_ms    = 0.125
  global speed_rads  = 0.350
  global accel_mss   = 0.600
  global accel_radss = 0.600
  global blend_radius_m = 0.000
  
  #--------------------------
  # Add any default subprograms here
  # For example, to drive a gripper as a program call:
  # def Gripper_Open():
  #   ...
  # end
  #
  # Example to drive a spray gun:
  def SprayOn(value):
    # use the value as an output:
    DO_SPRAY = 5
    if value == 0:
      set_standard_digital_out(DO_SPRAY, False)
    else:
      set_standard_digital_out(DO_SPRAY, True)
    end
  end

  # Example to synchronize 2
  def Synchronize():
    # Use the following digital output to signal the state of the robot:
    DO_SYNC = 1
    
    # Use the following digital input to get the state of another robot:
    DI_SYNC = 1
    
    if (get_standard_digital_out(DO_SYNC) == get_standard_digital_in(DI_SYNC)):
      set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DI_SYNC)))
      sleep(0.1)
      thread Thread_wait_1():
        while (True):
          sleep(0.01)
        end
      end
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        global thread_handler_1=run Thread_wait_1()
        while (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
          sync()
        end
        kill thread_handler_1
      end
    else:
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DO_SYNC)))
      end
    end
  end

  #
  # Example to move an external axis
  def MoveAxis(value):
    # use the value as an output:
    DO_AXIS_1 = 1
    DI_AXIS_1 = 1
    if value <= 0:
      set_standard_digital_out(DO_AXIS_1, False)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != False):
      #  sync()
      #end
    else:
      set_standard_digital_out(DO_AXIS_1, True)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != True):
      #  sync()
      #end
    end
  end
  #--------------------------
  
  
  # Main program:
  # Program generated by RoboDK v4.1.0 for UR3e_HORNO on 05/09/2022 13:29:59
  # Using nominal kinematics.
  # Using Ref. Frame No Ok 03: p[-0.386000, 1.280000, -0.011500, 0.000000, 0.000000, 0.000000]
  # set_reference(p[-0.386000, 1.280000, -0.011500, 0.000000, 0.000000, 0.000000])
  # Using TCP 0208-0001-0001-307-000-3 Horno: p[0.000000, 0.000000, 0.164750, 0.000000, 0.000000, 0.000000]
  set_tcp(p[0.000000, 0.000000, 0.164750, 0.000000, 0.000000, 0.000000])
  accel_radss = 5.236
  speed_rads  = 4.3633
  movej([0.488640, -1.452680, -1.300990, -1.967374, 1.554986, 0.448862],0.60000,0.12500,0,0.0000)
  accel_mss   = 0.1200
  speed_ms    = 0.1000
  movel(p[0.454000, 0.009000, 0.164109, -2.224056, 2.213304, 0.027803],accel_mss,speed_ms,0,0.000)
  movel(p[0.454000, 0.009000, 0.134109, -2.224056, 2.213304, 0.027803],accel_mss,speed_ms,0,0.000)
  # Detach from 0208-0001-0001-307-000-3 Horno
  accel_mss   = 0.9000
  speed_ms    = 0.5000
  movel(p[0.454000, 0.009000, 0.164109, -2.224056, 2.213304, 0.027803],accel_mss,speed_ms,0,0.000)
  movel(p[0.285741, -0.001106, 0.216852, 2.255733, -2.167594, 0.019286],accel_mss,speed_ms,0,0.000)
  # End of main program
end

RC_E1_PLACE_130()
