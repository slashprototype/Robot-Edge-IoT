def robot_edge_iot():
  global _hidden_verificationVariable=0
  set_safety_mode_transition_hardness(1)
  set_tool_communication(True, 1000000, 2, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.1566,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gp_boolean_input_action(69, "freedrive")
  step_count_ba2cb35b_fb61_451d_8ec6_803cd702526f = 0.0
  thread Step_Counter_Thread_c20cb4e7_fa1e_4531_aa70_effbe511bebe():
    while (True):
      step_count_ba2cb35b_fb61_451d_8ec6_803cd702526f = step_count_ba2cb35b_fb61_451d_8ec6_803cd702526f + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_c20cb4e7_fa1e_4531_aa70_effbe511bebe()
  set_target_payload(0.500000, [0.000000, 0.000000, 0.000000], [0.000485, 0.000485, 0.000485, 0.000000, 0.000000, 0.000000])
  # begin: URCap Installation Node
  #   Source: OnRobot, 5.9.1, OnRobot A/S
  #   Type: OnRobot Setup
  if (False):
    global twofg_Busy = 0
    global twofg_Force = 0
    global twofg_Grip_detected = 0
    global twofg_Width_ext = 0
    global twofg_Width_int = 0
  end
  ON_BASE_SHIFT_BOOL = 84
  ON_BASE_SHIFT_INT = 34
  ON_BASE_SHIFT_FLOAT = 44
  ON_DEVICE_SHIFT_BOOL_ARR = [84, 88, 88]
  ON_DEVICE_SHIFT_INT_ARR = [35, 39, 39]
  ON_DEVICE_SHIFT_FLOAT_ARR = [44, 46, 46]
  ON_REGISTERS_SUM_BOOL = 4
  ON_REGISTERS_SUM_INT = 5
  ON_REGISTERS_SUM_FLOAT = 2
  ON_REGISTERS_SPEEDL_INT = 0
  ON_DI_SINGLE = 0
  ON_DI_PRIMARY = 1
  ON_DI_SECONDARY = 2
  ON_DI_DUAL = 3
  on_robot_type = 3
  on_robot_cycle = 2.0
  on_device_ip = "0.0.0.0"
  on_device_socket_port = 51234
  on_xmlrpc = rpc_factory("xmlrpc", "http://0.0.0.0:41414")
  on_RPC = rpc_factory("xmlrpc", "http://127.0.0.1:31416")
  ON_DEBUG_LOG = False
  on_isMetric = True
  on_toolConnector = True
  on_ioqc = False
  on_dual = False
  on_computebox = False
  on_devices = 1
  on_gripper = [False, False, False]
  on_ft = False
  twofg_index = 0
  on_gripper[twofg_index] = True
  #======    OnRobot Globals    ======#
  
  ON_MATH_PI=3.141593
  ON_ZEROPOSE=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZEROFRAME=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO3D=[0.0,0.0,0.0]
  ON_ZERO6D=[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO8D=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
  ON_FALSE3D=[False,False,False]
  ON_FALSE6D=[False,False,False,False,False,False]
  ON_FALSE8D=[False,False,False,False,False,False,False,False]
  global on_return=0
  on_speedL=ON_ZERO6D
  on_speedBase=ON_ZERO6D
  on_speedVect=ON_ZERO6D
  on_speedExtra=ON_ZERO6D
  on_speedCB=ON_ZERO6D
  on_speedGecko=ON_ZERO6D
  on_RTDE_error=0
  on_dataProcess_thrd=0
  ON_DEVICE_ID_MISSING=0
  ON_INIT_WATCHDOG_HZ=5
  ON_INIT_TIMEOUT=500
  on_robot_TCP_offset=ON_ZEROFRAME
  on_tcp_offset_actual=ON_ZEROFRAME
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_robot_mount=[0.0,0.0]
  
  #======    End of OnRobot Globals    ======#
  #======    OnRobot twofg Globals    ======#
  
  twofg_DEVICE_ID_twofg7=192
  if ON_DEBUG_LOG:
  textmsg("twofg Dual: False, Index: ",twofg_index)
  if False:
  twofg_index=-1
  end 
  end 
  twofg_Width_ext_arr=[0,0,0]
  twofg_Width_int_arr=[0,0,0]
  twofg_Force_arr=[0,0,0]
  twofg_device_id_arr=[0,0,0]
  twofg_product_code_arr=[0,0,0]
  twofg_Status_arr=[0,0,0]
  twofg_Grip_detected_arr=[False,False,False]
  twofg_Busy_arr=[False,False,False]
  twofg_data_error_arr=[0,0,0]
  twofg_fingertip_arr=[0,0,0]
  twofg_Grip_guard_arr=[False,False,False]
  
  twofg_Width_ext=0
  twofg_Width_int=0
  twofg_Force=0
  twofg_Busy=False
  twofg_Grip_detected=False
  def get_twofg_Busy():
  return twofg_Busy
  end 
  def get_twofg_Width_ext():
  return twofg_Width_ext
  end 
  def get_twofg_Width_int():
  return twofg_Width_int
  end 
  def get_twofg_Grip_detected():
  return twofg_Grip_detected
  end 
  def get_twofg_Force():
  return twofg_Force
  end 
  
  
  #======    End of OnRobot twofg Globals    ======#
  #======    OnRobot Interface Messages    ======#
  
  on_devices_primary_log="OnRobot Devices"
  on_devices_secondary_log="OnRobot Secondary Device"
  on_device_error_title="OnRobot - Device error"
  on_install_error="OnRobot Setup is not correct.<br>Check the status in the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_device_missing="No device connected.<br>Program halted."
  ft_device_missing="No OnRobot F/T sensor connected.<br>Program halted."
  cb_device_missing="No OnRobot F/T device connected.<br>Program halted."
  hex_device_missing="No HEX Sensor connected.<br>Program halted."
  rg2ft_device_missing="No RG2-FT gripper connected.<br>Program halted."
  rg_device_missing="No RG gripper connected.<br>Program halted."
  vg_device_missing="No VG gripper connected.<br>Program halted."
  gg_device_missing="No Gecko Gripper connected.<br>Program halted."
  sg_device_missing="No Soft Gripper connected.<br>Program halted."
  tfg_device_missing="No 3FG gripper connected.<br>Program halted."
  sdr_device_missing="No OnRobot Sander connected.<br>Program halted."
  twofg_device_missing="No 2FG gripper connected.<br>Program halted."
  vgp_device_missing="No VGP gripper connected.<br>Program halted."
  mg_device_missing="No Magnetic Gripper connected.<br>Program halted."
  on_xmlrpc_start_ip="Connecting to OnRobot XML-RPC Server:"
  on_java_comm_error_textmsg_title="OnRobot - Communication error:"
  on_java_comm_controlsocket_open_error="Socket 'javaSocket' opening was unsuccessful."
  on_java_comm_error_title="OnRobot - Communication error"
  on_java_comm_socket_open_error="Establishing connection with the URCap was timed out.<br>Check the status in the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_rtde_feed_error_textmsg_title="OnRobot - RTDE error:"
  on_rtde_feed_error="RTDE feed error. OnRobot device count mismatch.<br>Program halted."
  on_rtde_feed_open_error_textmsg="Socket 'rtdeFeed' opening was unsuccessful."
  on_rtde_feed_error_title="OnRobot - RTDE error"
  on_rtde_feed_count_error="Invalid RTDE offset setup detected. Please check RTDE Offsets at the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_rtde_feed_open_error="Establishing connection with the devices was timed out.<br>Ensure that the OnRobot devices are operational, and check the status in the OnRobot Setup page in the Installation Tab."
  
  #======    End of OnRobot Interface Messages    ======#
  #======    OnRobot Interface    ======#
  
  on_portopened_javaSocket=False
  on_rtde_feed_opened=False
  on_dataProcess_running=False
  def on_missing():
  popup(on_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def ft_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def cb_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def hex_missing():
  popup(hex_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg2ft_missing():
  popup(rg2ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg_missing():
  popup(rg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vg_missing():
  popup(vg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def gg_missing():
  popup(gg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sg_missing():
  popup(sg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def tfg_missing():
  popup(tfg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sdr_missing():
  popup(sdr_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def twofg_missing():
  popup(twofg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vgp_missing():
  popup(vgp_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def mg_missing():
  popup(mg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def on_portclose_javaSocket():
  socket_close("javaSocket")
  on_portopened_javaSocket=False
  end 
  def on_portopen_javaSocket():
  on_portclose_javaSocket()
  on_portopened_javaSocket=socket_open("127.0.0.1",44005,"javaSocket")
  if not on_portopened_javaSocket:
  textmsg(on_java_comm_error_textmsg_title,on_java_comm_controlsocket_open_error)
  popup(on_java_comm_socket_open_error,title=on_java_comm_error_title,error=True,blocking=False)
  halt
  end 
  end 
  def on_rtde_feed_close():
  socket_close("rtdeFeed")
  on_rtde_feed_opened=False
  end 
  def on_rtde_feed_open():
  on_rtde_feed_close()
  if((ON_BASE_SHIFT_BOOL+ON_REGISTERS_SUM_BOOL)>128)or((ON_BASE_SHIFT_INT+ON_REGISTERS_SUM_INT)>48)or((ON_BASE_SHIFT_FLOAT+ON_REGISTERS_SUM_FLOAT)>48):
  popup(on_rtde_feed_count_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  if not on_rtde_feed_opened:
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  end 
  if not on_rtde_feed_opened:
  textmsg(on_rtde_feed_error_textmsg_title,on_rtde_feed_open_error_textmsg)
  popup(on_rtde_feed_open_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  socket_send_int(ON_BASE_SHIFT_BOOL,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SUM_BOOL,"rtdeFeed")
  socket_send_int(ON_BASE_SHIFT_INT,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SUM_INT,"rtdeFeed")
  socket_send_int(ON_BASE_SHIFT_FLOAT,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SUM_FLOAT,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SPEEDL_INT,"rtdeFeed")
  end 
  def on_dataRead():
  enter_critical
  on_RTDE_error=read_input_integer_register(ON_BASE_SHIFT_INT)
  exit_critical
  end 
  def on_set_rtde_watchdog(updateHz=ON_INIT_WATCHDOG_HZ):
  if(on_devices>0):
  watchdog_int_reg_str=str_cat("input_int_register_",ON_BASE_SHIFT_INT)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  local update_str=str_cat(" watchdog set to [Hz]: ",updateHz)
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  end 
  def on_speedCB_get():
  return[on_speedCB[0],on_speedCB[1],on_speedCB[2],on_speedCB[3],on_speedCB[4],on_speedCB[5]]
  end 
  def on_speedGecko_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_gecko:
  speedExtra=[on_speedGecko[0],on_speedGecko[1],on_speedGecko[2],on_speedGecko[3],on_speedGecko[4],on_speedGecko[5]]
  end 
  return speedExtra
  end 
  def on_speedGecko_set(speedGecko):
  on_speedGecko=[speedGecko[0],speedGecko[1],speedGecko[2],speedGecko[3],speedGecko[4],speedGecko[5]]
  end 
  thread on_dataProcess_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting on_dataRead thread")
  end 
  local error=False
  on_dataProcess_running=True
  sync()
  while on_dataProcess_running:
  sync()
  on_dataRead()
  error=on_error((on_RTDE_error<0),on_rtde_feed_error,on_rtde_feed_error_title,False)
  on_dataProcess_running=not error
  end 
  if error:
  halt
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping on_dataRead thread")
  end 
  end 
  thread on_set_watchdog_thread():
  sleep(1)
  on_set_rtde_watchdog(updateHz=ON_INIT_WATCHDOG_HZ)
  sleep(1/ON_INIT_WATCHDOG_HZ)
  on_dataProcess_running=False
  kill on_dataProcess_thrd
  end 
  
  #======    End of OnRobot Interface    ======#
  #======    OnRobot QC Setup Tool Connector    ======#
  
  def tc_setup_tool():
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector start...")
  end 
  set_tool_voltage(24)
  
  set_tool_communication(True,1000000,2,1,1.5,3.5)
  
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector end.")
  end 
  end 
  
  #======    End of OnRobot QC Setup Tool Connector    ======#
  #======    OnRobot twofg Interface    ======#
  
  twofg_dataRead_running=False
  def twofg_dataRead_RTDE(tool_index):
  local reg_offset_bool=ON_DEVICE_SHIFT_BOOL_ARR[tool_index]
  local reg_offset_int=ON_DEVICE_SHIFT_INT_ARR[tool_index]
  local reg_offset_float=ON_DEVICE_SHIFT_FLOAT_ARR[tool_index]
  enter_critical
  floatRegDummy=read_input_float_register(reg_offset_float+0)
  twofg_Width_ext_arr[tool_index]=floatRegDummy
  floatRegDummy=read_input_float_register(reg_offset_float+1)
  twofg_Width_int_arr[tool_index]=floatRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+0)
  twofg_device_id_arr[tool_index]=intRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+1)
  twofg_product_code_arr[tool_index]=intRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+2)
  twofg_Status_arr[tool_index]=intRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+3)
  twofg_Force_arr[tool_index]=intRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+0)
  twofg_Busy_arr[tool_index]=boolRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+1)
  twofg_Grip_detected_arr[tool_index]=boolRegDummy
  exit_critical
  end 
  thread twofg_dataRead_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting twofg_dataRead thread")
  end 
  while twofg_dataRead_running:
  sync()
  if(twofg_index==ON_DI_DUAL):
  twofg_dataRead_RTDE(ON_DI_PRIMARY)
  twofg_dataRead_RTDE(ON_DI_SECONDARY)
  else:
  twofg_dataRead_RTDE(twofg_index)
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping twofg_dataRead thread")
  end 
  end 
  
  #======    End of OnRobot twofg Interface    ======#
  #======    OnRobot TCP Messages    ======#
  
  on_tcp_log_msg_default="OnRobot: Robot TCP Offset set to:"
  on_tcp_log_msg_primary="OnRobot: Robot TCP Offset set to Primary:"
  on_tcp_log_msg_secondary="OnRobot: Robot TCP Offset set to Secondary:"
  
  #======    End of OnRobot TCP Messages    ======#
  #======    OnRobot TCP    ======#
  
  on_tcp_offset_actual=ON_ZEROFRAME
  on_tcp_offset_primary=ON_ZEROFRAME
  on_tcp_static_primary=ON_ZEROFRAME
  on_tcp_dynamic_primary=ON_ZEROFRAME
  on_tcp_vision_primary=ON_ZEROFRAME
  on_tcp_qc_primary=ON_ZEROFRAME
  on_tcp_base_primary=ON_ZEROFRAME
  on_tcp_gripper_static_primary=ON_ZEROFRAME
  on_tcp_tool_primary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_primary=ON_ZEROFRAME
  on_tcp_gripper_primary=ON_ZEROFRAME
  on_tcp_offset_secondary=ON_ZEROFRAME
  on_tcp_static_secondary=ON_ZEROFRAME
  on_tcp_dynamic_secondary=ON_ZEROFRAME
  on_tcp_vision_secondary=ON_ZEROFRAME
  on_tcp_qc_secondary=ON_ZEROFRAME
  on_tcp_base_secondary=ON_ZEROFRAME
  on_tcp_gripper_static_secondary=ON_ZEROFRAME
  on_tcp_tool_secondary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_secondary=ON_ZEROFRAME
  on_tcp_gripper_secondary=ON_ZEROFRAME
  def on_tcp_update_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary start..")
  end 
  on_tcp_gripper_dynamic_primary=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  enter_critical
  on_tcp_dynamic_primary=pose_trans(on_tcp_static_primary,on_tcp_gripper_dynamic_primary)
  on_tcp_offset_primary=pose_trans(on_tcp_dynamic_primary,on_tcp_tool_primary)
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary end.")
  end 
  end 
  def on_tcp_init_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary start..")
  end 
  enter_critical
  on_tcp_base_primary=pose_trans(on_tcp_vision_primary,on_tcp_qc_primary)
  on_tcp_static_primary=pose_trans(on_tcp_base_primary,on_tcp_gripper_static_primary)
  exit_critical
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary end.")
  end 
  end 
  def on_tcp_offset_set(TCP_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set started!")
  end 
  on_tcp_offset_send(TCP_offset)
  if(on_follow_tcp):
  set_tcp(TCP_offset)
  end 
  on_robot_TCP_offset=TCP_offset
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set to: ",on_robot_TCP_offset)
  end 
  end 
  def on_tcp_offset_forced_set_actual(isPrimary=True):
  if(not on_follow_tcp):
  
  local tcp_log_msg=on_tcp_log_msg_default
  
  textmsg(tcp_log_msg,on_tcp_offset_actual)
  set_tcp(on_tcp_offset_actual)
  end 
  end 
  def on_tcp_update(isPrimary=True):
  on_tcp_update_primary()
  
  on_tcp_set_actual_to(isPrimary)
  end 
  def on_tcp_set_actual_to(isPrimary=True):
  
  on_tcp_offset_actual=on_tcp_offset_primary
  if(on_follow_tcp):
  textmsg(on_tcp_log_msg_default,on_tcp_offset_actual)
  end 
  
  on_tcp_active_is_primary=isPrimary
  on_tcp_offset_set(on_tcp_offset_actual)
  end 
  def on_tcp_update_tool_primary(tool_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary start..")
  end 
  on_tcp_tool_primary=tool_offset
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary end.")
  end 
  end 
  def on_tcp_tool_rpy_get(xyz=[0.0,0.0,0.0],rpy=[0.0,0.0,0.0]):
  local rotvec=rpy2rotvec(rpy)
  local tool_offset=p[xyz[0],xyz[1],xyz[2],rotvec[0],rotvec[1],rotvec[2]]
  return tool_offset
  end 
  
  def on_tcp_update_tool(tool_offset,tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_tcp_update_tool_primary(tool_offset)
  local isPrimary=True
  
  end 
  on_tcp_set_actual_to(isPrimary)
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool end.")
  end 
  end 
  def on_get_tcp_for(tool_index):
  if tool_index==ON_DI_SECONDARY:
  local actual_tcp=on_tcp_static_secondary
  else:
  local actual_tcp=on_tcp_static_primary
  end 
  return actual_tcp
  end 
  
  #======    End of OnRobot TCP    ======#
  #======    OnRobot Payload Messages    ======#
  
  on_mass_log_msg="OnRobot: Robot Payload Mass set to:"
  on_cog_log_msg="OnRobot: Robot Payload Center of Gravity set to:"
  
  #======    End of OnRobot Payload Messages    ======#
  #======    OnRobot Payload    ======#
  
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_cog_primary=ON_ZEROFRAME
  on_cog_L1L2_primary=ON_ZEROFRAME
  on_mass_primary=0.0
  on_mass_L1L2_primary=0.0
  on_cog_vision_primary=ON_ZEROFRAME
  on_cog_qc_primary=ON_ZEROFRAME
  on_cog_base_primary=ON_ZEROFRAME
  on_cog_gripper_primary=ON_ZEROFRAME
  on_cog_tool_primary=ON_ZEROFRAME
  on_mass_vision_primary=0.0
  on_mass_qc_primary=0.0
  on_mass_base_primary=0.0
  on_mass_gripper_primary=0.0
  on_mass_tool_primary=0.0
  on_cog_secondary=ON_ZEROFRAME
  on_mass_secondary=0.0
  on_cog_gripper_secondary=ON_ZEROFRAME
  on_mass_gripper_secondary=0.0
  on_cog_tool_secondary=ON_ZEROFRAME
  on_mass_tool_secondary=0.0
  ON_LB2KG001=0.45359237/100
  def on_payload_update_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary start..")
  end 
  enter_critical
  on_mass_primary=on_mass_L1L2_primary+on_mass_tool_primary
  local massL1L2L3Ratio=on_mass_tool_primary/on_mass_primary
  local toolAbsCOG=pose_trans(on_tcp_dynamic_primary,on_cog_tool_primary)
  toolAbsCOG=p[toolAbsCOG[0],toolAbsCOG[1],toolAbsCOG[2],0.0,0.0,0.0]
  on_cog_primary=interpolate_pose(on_cog_L1L2_primary,toolAbsCOG,massL1L2L3Ratio)
  on_cog_primary=p[on_cog_primary[0],on_cog_primary[1],on_cog_primary[2],0.0,0.0,0.0]
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary end.")
  end 
  end 
  def on_payload_init_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary start..")
  end 
  enter_critical
  on_mass_base_primary=on_mass_vision_primary+on_mass_qc_primary
  local massL0L1Ratio=on_mass_qc_primary/on_mass_base_primary
  on_mass_L1L2_primary=on_mass_base_primary+on_mass_gripper_primary
  local massL1L2Ratio=on_mass_gripper_primary/on_mass_L1L2_primary
  local qcAbsCOG=pose_trans(on_tcp_vision_primary,on_cog_qc_primary)
  qcAbsCOG=p[qcAbsCOG[0],qcAbsCOG[1],qcAbsCOG[2],0.0,0.0,0.0]
  on_cog_base_primary=interpolate_pose(on_cog_vision_primary,qcAbsCOG,massL0L1Ratio)
  on_cog_base_primary=p[on_cog_base_primary[0],on_cog_base_primary[1],on_cog_base_primary[2],0.0,0.0,0.0]
  local gripperAbsCOG=pose_trans(on_tcp_base_primary,on_cog_gripper_primary)
  gripperAbsCOG=p[gripperAbsCOG[0],gripperAbsCOG[1],gripperAbsCOG[2],0.0,0.0,0.0]
  on_cog_L1L2_primary=interpolate_pose(on_cog_base_primary,gripperAbsCOG,massL1L2Ratio)
  on_cog_L1L2_primary=p[on_cog_L1L2_primary[0],on_cog_L1L2_primary[1],on_cog_L1L2_primary[2],0.0,0.0,0.0]
  exit_critical
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary end.")
  end 
  end 
  def on_payload_update():
  on_payload_update_primary()
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  on_payload_set_actual()
  end 
  def on_payload_set_actual():
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  local CoG=[on_cog_actual[0],on_cog_actual[1],on_cog_actual[2]]
  on_payload_set(on_mass_actual,CoG)
  end 
  def on_payload_update_tool_primary(tool_mass=0,tool_cog=[0.0,0.0,0.0]):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary start..")
  end 
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary end.")
  end 
  end 
  def on_payload_set(mass,CoG):
  if ON_DEBUG_LOG:
  textmsg("Payload set started!")
  end 
  local center_of_gravity=[CoG[0],CoG[1],CoG[2]]
  on_payload_send(center_of_gravity,mass)
  if(on_isMetric):
  local roundedMass=floor(mass*100+0.5)/100
  else:
  local roundedMass=floor(mass/ON_LB2KG001+0.5)*ON_LB2KG001
  end 
  set_payload(roundedMass,center_of_gravity)
  on_mass_actual=roundedMass
  on_cog_actual=p[CoG[0],CoG[1],CoG[2],0.0,0.0,0.0]
  if ON_DEBUG_LOG:
  textmsg("Payload mass, CoG set to: ",str_cat(str_cat(mass,", "),CoG))
  end 
  end 
  
  def on_payload_update_secondary():
  end 
  def on_payload_init_secondary():
  end 
  
  def on_payload_update_tool(tool_mass,tool_cog=[0.0,0.0,0.0],tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  else:
  on_cog_tool_secondary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_secondary=tool_mass
  end 
  on_payload_update()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool end.")
  end 
  end 
  def on_payload_get_cog2tcp_tool(tool_index=0):
  if(tool_index!=ON_DI_SECONDARY):
  local cog_tool=[on_tcp_tool_primary[0],on_tcp_tool_primary[1],on_tcp_tool_primary[2]]
  else:
  local cog_tool=[on_tcp_tool_secondary[0],on_tcp_tool_secondary[1],on_tcp_tool_secondary[2]]
  end 
  return cog_tool
  end 
  
  #======    End of OnRobot Payload    ======#
  #======    OnRobot QC TCP    ======#
  
  onrobotmini=0
  
  def on_tcp_offset_send(TCP_offset):
  on_robot_TCP_offset=TCP_offset
  end 
  def on_payload_send(CoG,mass):
  on_robot_payload_cog=CoG
  on_robot_payload_mass=mass
  end 
  
  
  #======    End of OnRobot QC TCP    ======#
  #======    OnRobot twofg TCP    ======#
  
  def twofg_payload_set(mass,tool_index=0,use_guard=False):
  if ON_DEBUG_LOG:
  textmsg("twofg Payload mass command starting..")
  end 
  if(tool_index==ON_DI_SECONDARY):
  local cogTool=[on_cog_tool_secondary[0],on_cog_tool_secondary[1],on_cog_tool_secondary[2]]
  else:
  local cogTool=[on_cog_tool_primary[0],on_cog_tool_primary[1],on_cog_tool_primary[2]]
  end 
  if(twofg_Grip_detected_arr[tool_index]):
  local mass2set=mass
  twofg_Grip_guard_arr[tool_index]=use_guard and not on_ioqc
  else:
  local mass2set=0.0
  twofg_Grip_guard_arr[tool_index]=False
  end 
  on_payload_update_tool(mass2set,cogTool,tool_index)
  if ON_DEBUG_LOG:
  textmsg("2FG Payload mass command ended.")
  end 
  end 
  
  #======    End of OnRobot twofg TCP    ======#
  #======    OnRobot  Speedl    ======#
  
  on_speedl_thread_handler=0
  on_speedl_is_enabled=False
  on_speedl_is_running=False
  on_speedl_acc=0.0
  ft_speedl_hg_caranteen_reached=False
  ft_speedl_hg_caranteen_safemode=False
  on_speedl_for_ftcontrol=False
  on_speedl_for_move=False
  on_speedl_for_handguide=False
  on_speedl_for_insertpart=False
  on_speedl_for_depthcompensation=False
  on_speedl_for_center=False
  on_speedl_for_gecko=False
  on_speedl_acc=10000.0 
  on_speedl_acc_to_zero=3.0 
  ON_SPEEDL_FTCONTROL=1
  ON_SPEEDL_HANDGUIDE=2
  ON_SPEEDL_TRAJECTORY=3
  ON_SPEEDL_MOVE=ON_SPEEDL_TRAJECTORY
  ON_SPEEDL_INSERTPART=4
  ON_SPEEDL_DEPTHCOMP=5
  ON_SPEEDL_CENTER=6
  ON_SPEEDL_GECKO=7
  def on_wait_ms(time_ms):
  local sync_time=ceil(norm(time_ms/2.0))
  while(sync_time>0):
  sync_time=sync_time-1
  sync()
  end
  end 
  def on_error(status_flag,message,title,stop_var=False):
  if(status_flag):
  popup(message,title=title,error=True,blocking=False)
  stop_var=True
  end 
  return stop_var
  end 
  def on_warning(status_flag,message,title,isPopupNeeded=False,is_shown=False):
  if(status_flag):
  if(not is_shown):
  if(isPopupNeeded):
  popup(message,title=title,warning=True,blocking=False)
  else:
  textmsg(title+": ",message)
  end 
  is_shown=True
  end 
  else:
  is_shown=False
  end 
  return is_shown
  end 
  def on_speedl_add_extra(speedBase,speedExtra):
  speedSum=ON_ZERO6D
  speedBaseP=p[speedBase[0],speedBase[1],speedBase[2],speedBase[3],speedBase[4],speedBase[5]]
  speedExtraP=p[speedExtra[0],speedExtra[1],speedExtra[2],speedExtra[3],speedExtra[4],speedExtra[5]]
  speedSumP=pose_add(speedExtraP,speedBaseP)
  speedSum=[speedSumP[0],speedSumP[1],speedSumP[2],speedSumP[3],speedSumP[4],speedSumP[5]]
  return speedSum
  end 
  
  thread on_speedl_thread():
  if ON_DEBUG_LOG:
  textmsg("Speedl thread started..")
  end 
  enter_critical
  on_speedl_is_running=True
  on_speedl_is_enabled=True
  exit_critical
  on_speedL=ON_ZERO6D
  on_speedL_last=ON_ZERO6D
  
  while on_speedl_is_running:
  on_speedBase=on_speedCB_get()
  on_speedL=on_speedBase
  
  
  if on_speedl_is_enabled:
  if(on_speedL==ON_ZERO6D):
  on_speedL=[on_speedL_last[0]/100,on_speedL_last[1]/100,on_speedL_last[2]/100,on_speedL_last[3]/100,on_speedL_last[4]/100,on_speedL_last[5]/100]
  end
  speedl(on_speedL,a=on_speedl_acc,t=0.001)
  else:
  speedl(ON_ZERO6D,a=on_speedl_acc_to_zero,t=0.001)
  end 
  on_speedL_last=on_speedL
  end 
  
  on_speedL=ON_ZERO6D
  if ON_DEBUG_LOG:
  textmsg("Speedl thread ended.")
  end 
  end 
  def on_speedl_integer_get():
  local speedl_integer=binary_list_to_integer([on_speedl_for_ftcontrol,on_speedl_for_handguide,on_speedl_for_move,on_speedl_for_insertpart,on_speedl_for_depthcompensation,on_speedl_for_center,on_speedl_for_gecko])
  return speedl_integer
  end 
  def on_speedl_start_for(speedl_id):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=True
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=True
  elif(speedl_id==ON_SPEEDL_TRAJECTORY):
  on_speedl_for_move=True
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=True
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=True
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=True
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=True
  else:
  textmsg("Unknown Start speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if not(speedl_integer==0):
  if not on_speedl_is_running:
  on_speedl_thread_handler=run on_speedl_thread()
  end 
  end 
  return on_speedl_is_running
  end 
  def on_speedl_stop_for(speedl_id,brake=10,brakeRot=10):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=False
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=False
  elif(speedl_id==ON_SPEEDL_TRAJECTORY):
  on_speedl_for_move=False
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=False
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=False
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=False
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=False
  on_speedGecko_set(ON_ZERO6D)
  else:
  textmsg("Unknown Stop speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if(speedl_integer==0):
  if(on_speedl_is_running):
  kill on_speedl_thread_handler
  enter_critical
  on_speedl_is_running=False
  exit_critical
  
  end 
  if ON_DEBUG_LOG:
  textmsg("Speedl thread stopped")
  end 
  stopl(brake,brakeRot)
  end 
  return on_speedl_is_running
  end 
  def on_speedl_pause():
  on_speedl_is_enabled=False
  return on_speedl_integer_get()
  end 
  def on_speedl_resume():
  on_speedl_is_enabled=True
  return on_speedl_integer_get()
  end 
  
  #======    End of OnRobot  Speedl    ======#
  #======    OnRobot TwoFG Engine Messages    ======#
  
  twofg_error_title="OnRobot - 2FG error"
  twofg_device_id_waiting="Waiting for valid OnRobot 2FG ID..."
  twofg_device_id_timeout="Waiting for valid OnRobot 2FG ID timed out.<br>Program halted."
  twofg_data_error_title="OnRobot - 2FG Data error"
  twofg_data_error_type="No or unknown Gripper connected."
  twofg_data_warning_title="OnRobot - 2FG Data warning:"
  twofg_status_error_title="OnRobot - 2FG Status error"
  twofg_status_error_missing="Communication problem with an 2FG gripper. Please check the device.<br>Program halted."
  twofg_else_error="Unknown error code:"
  twofg_status_msg_single="2FG status:"
  twofg_data_error_bit0_single="Wrong size of float data received."
  twofg_data_error_bit1_single="Wrong size of integer data received."
  twofg_data_error_bit2_single="Wrong size of boolean data received."
  twofg_status_msg_primary="2FG Primary status:"
  twofg_data_error_bit0_primary="Wrong size of float data received for Primary 2FG."
  twofg_data_error_bit1_primary="Wrong size of integer data received for Primary 2FG."
  twofg_data_error_bit2_primary="Wrong size of boolean data received for Primary 2FG."
  twofg_status_msg_secondary="2FG Secondary status:"
  twofg_data_error_bit0_secondary="Wrong size of float data received for Secondary 2FG."
  twofg_data_error_bit1_secondary="Wrong size of integer data received for Secondary 2FG."
  twofg_data_error_bit2_secondary="Wrong size of boolean data received for Secondary 2FG."
  
  #======    End of OnRobot TwoFG Engine Messages    ======#
  #======    OnRobot TwoFG Engine    ======#
  
  twofg_dataProcess_running=False
  twofg_start_flange=ON_ZEROPOSE
  twofg_start_pose=ON_ZEROPOSE
  twofg_status_warning_title=str_cat(twofg_status_error_title,": ")
  def twofg_dataProcess_status_errors(twofg_stop=False):
  enter_critical
  local tool_index=twofg_index
  if(tool_index==ON_DI_DUAL):
  tool_index=ON_DI_SECONDARY
  twofg_stop=on_error((twofg_device_id_arr[tool_index]!=tool_index),twofg_status_error_missing,twofg_status_error_title,twofg_stop)
  twofg_stop=on_error((twofg_product_code_arr[tool_index]==ON_DEVICE_ID_MISSING),twofg_status_error_missing,twofg_status_error_title,twofg_stop)
  tool_index=ON_DI_PRIMARY
  end 
  twofg_stop=on_error((twofg_device_id_arr[tool_index]!=tool_index),twofg_status_error_missing,twofg_status_error_title,twofg_stop)
  twofg_stop=on_error((twofg_product_code_arr[tool_index]==ON_DEVICE_ID_MISSING),twofg_status_error_missing,twofg_status_error_title,twofg_stop)
  
  
  exit_critical
  return twofg_stop
  end 
  def twofg_dataProcess():
  enter_critical
  local tool_index=twofg_index
  if tool_index==ON_DI_DUAL:
  twofg_Width_ext_primary=twofg_Width_ext_arr[ON_DI_PRIMARY]
  twofg_Width_int_primary=twofg_Width_int_arr[ON_DI_PRIMARY]
  twofg_Force_primary =twofg_Force_arr[ON_DI_PRIMARY]
  twofg_Busy_primary=twofg_Busy_arr[ON_DI_PRIMARY]
  twofg_Grip_detected_primary=twofg_Grip_detected_arr[ON_DI_PRIMARY]
  twofg_Width_ext_secondary=twofg_Width_ext_arr[ON_DI_SECONDARY]
  twofg_Width_int_secondary=twofg_Width_int_arr[ON_DI_SECONDARY]
  twofg_Force_secondary =twofg_Force_arr[ON_DI_SECONDARY]
  twofg_Busy_secondary=twofg_Busy_arr[ON_DI_SECONDARY]
  twofg_Grip_detected_secondary=twofg_Grip_detected_arr[ON_DI_SECONDARY]
  else:
  twofg_Width_ext=twofg_Width_ext_arr[tool_index]
  twofg_Width_int=twofg_Width_int_arr[tool_index]
  twofg_Force =twofg_Force_arr[tool_index]
  twofg_Busy=twofg_Busy_arr[tool_index]
  twofg_Grip_detected=twofg_Grip_detected_arr[tool_index]
  end 
  exit_critical
  end 
  thread twofg_dataProcess_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting twofg_dataProcess thread")
  end 
  while twofg_dataProcess_running:
  sync()
  local twofg_stop=False
  twofg_stop=twofg_dataProcess_status_errors(twofg_stop)
  if twofg_stop:
  halt
  end 
  twofg_dataProcess()
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping twofg_dataProcess thread")
  end 
  end 
  def twofg_index_get():
  return twofg_index
  end 
  
  #======    End of OnRobot TwoFG Engine    ======#
  textmsg(on_devices_primary_log, ": Quick Changer + 2FG7 + [0.0, 0.0, 0.018000000000000002, 0.0, 0.0, 0.0]")
  on_install_tcp = True
  on_follow_tcp = True
  on_tcp_active_is_primary = True
  on_tcp_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_vision_primary = 0.0
  on_tcp_qc_primary = p[0.0, 0.0, 0.0136, 0.0, 0.0, 0.0]
  on_cog_qc_primary = p[0.0, 0.0, 0.004, 0.0, 0.0, 0.0]
  on_mass_qc_primary = 0.06
  on_tcp_gripper_static_primary = p[0.0, 0.0, 0.125, 0.0, 0.0, 0.0]
  on_cog_gripper_primary = p[0.000, 0.000, 0.052, 0.0, 0.0, 0.0]
  on_mass_gripper_primary = 1.14
  on_tcp_tool_primary = p[0.0, 0.0, 0.018000000000000002, 0.0, 0.0, 0.0]
  on_cog_tool_primary = p[0.0, 0.0, 0.018000000000000002, 0.0, 0.0, 0.0]
  on_mass_tool_primary = 0.0
  #======    OnRobot TwoFG Width Messages    ======#
  
  twofg_grip_title="OnRobot - 2FG Grip"
  twofg_grip_return_error_n1="twofg command returned with error.<br>Please be sure that the required width is between the limits.<br>Program halted."
  twofg_grip_return_error_n2="twofg Grip command did not apply the force at the end.<br>Program halted."
  
  #======    End of OnRobot TwoFG Width Messages    ======#
  #======    OnRobot twofg Width command twofg_grip    ======#
  
  twofg__grip_param_warning_width="The parameter 'diameter' is out of the limits. Limited value sent: "
  twofg__grip_param_warning_force="The parameter 'force' is out of the limits. Limited value sent: "
  def twofg_grip(width,force,speed,external_grip=True,tool_index=0,blocking=True):
  if ON_DEBUG_LOG:
  textmsg("twofg Grip start..")
  end 
  local retVal=0
  twofg_Grip_guard_arr[tool_index]=False
  sync()
  if(tool_index==ON_DI_SECONDARY):
  local isPrimary=False
  else:
  local isPrimary=True
  end 
  if(on_follow_tcp):
  on_tcp_set_actual_to(isPrimary)
  end 
  sync()
  if external_grip:
  retVal=on_xmlrpc.twofg_grip_external(tool_index,width+0.0,force,speed)
  else:
  retVal=on_xmlrpc.twofg_grip_internal(tool_index,width+0.0,force,speed)
  end 
  if(retVal!=0):
  popup(twofg_grip_return_error_n1,twofg_grip_title,error=True,blocking=False)
  halt
  end 
  if blocking:
  local timeout=0
  while not twofg_Busy_arr[tool_index]:
  sleep(0.008)
  timeout=timeout+1
  if timeout>20:
  break
  end 
  end 
  while(twofg_Busy_arr[tool_index]==True):
  sync()
  end 
  end 
  if(on_follow_tcp):
  on_tcp_update(isPrimary)
  end 
  if ON_DEBUG_LOG:
  textmsg("2FG Grip ended.")
  end 
  return retVal
  end 
  twofg_release_force=80
  def twofg_release(width,speed,external_release=True,tool_index=0,blocking=True):
  local retVal=0
  retVal=twofg_grip(width,twofg_release_force,speed,external_release,tool_index,blocking)
  return retVal
  end 
  def twofg_grip_ext(width,force,speed,tool_index=0):
  local retVal=twofg_grip(width,force,speed,True,tool_index,True)
  return retVal
  end 
  def twofg_grip_int(width,force,speed,tool_index=0):
  local retVal=twofg_grip(width,force,speed,False,tool_index,True)
  return retVal
  end 
  def twofg_release_ext(width,speed,tool_index=0):
  local retVal=twofg_release(width,speed,True,tool_index,True)
  return retVal
  end 
  def twofg_release_int(width,speed,tool_index=0):
  local retVal=twofg_release(width,speed,False,tool_index,True)
  return retVal
  end 
  
  #======    End of OnRobot twofg Width command twofg_grip    ======#
  #======    OnRobot VG Monitor Messages    ======#
  
  twofg_monitor_error_title="OnRobot - 2FG Grip lost"
  twofg_monitor_grip_lost_error="Grip lost detected.<br>Program halted."
  
  #======    End of OnRobot VG Monitor Messages    ======#
  #======    OnRobot twofg Monitor    ======#
  
  thread twofg_monitor_thread():
  while True:
  sync()
  local twofg_error=False
  if(twofg_index==ON_DI_DUAL):
  local tool_index=ON_DI_SECONDARY
  twofg_error=twofg_monitor_check(tool_index)
  local tool_index=ON_DI_PRIMARY
  else:
  local tool_index=twofg_index
  end 
  twofg_error=twofg_error or twofg_monitor_check(tool_index)
  if twofg_error:
  halt
  end 
  end 
  end 
  def twofg_monitor_check(tool_index=0):
  local error=False
  if twofg_Grip_guard_arr[tool_index]and not twofg_Grip_detected_arr[tool_index]:
  popup(twofg_monitor_grip_lost_error,title=twofg_monitor_error_title,error=True,blocking=False)
  twofg_payload_set(0,tool_index=tool_index)
  error=True
  end 
  return error
  end 
  
  #======    End of OnRobot twofg Monitor    ======#
  #======    OnRobot Run    ======#
  
  textmsg(on_xmlrpc_start_ip,on_device_ip)
  on_portopen_javaSocket()
  sync()
  on_rtde_feed_open()
  sync()
  on_set_rtde_watchdog(updateHz=0.2)
  sync()
  on_dataProcess_thrd=run on_dataProcess_thread()
  sync()
  on_tcp_init_primary()
  on_payload_init_primary()
  
  on_tcp_set_actual_to(on_tcp_active_is_primary)
  if(on_follow_tcp):
  on_payload_set_actual()
  end 
  on_watchdog_thrd=run on_set_watchdog_thread()
  sync()
  
  #======    End of OnRobot Run    ======#
  #======    OnRobot QC Start    ======#
  
  if(on_toolConnector):
  tc_setup_tool()
  end 
  sync()
  
  #======    End of OnRobot QC Start    ======#
  #======    OnRobot twofg Run    ======#
  
  twofg_dataRead_running=True
  sync()
  twofg_dataRead_thrd=run twofg_dataRead_thread()
  sync()
  textmsg(twofg_device_id_waiting)
  if(twofg_index==ON_DI_DUAL):
  local twofg_timeout=0
  while not(twofg_product_code_arr[ON_DI_PRIMARY]==twofg_DEVICE_ID_twofg7):
  sync()
  twofg_timeout=twofg_timeout+1
  if(twofg_timeout>ON_INIT_TIMEOUT):
  popup(twofg_device_id_timeout,twofg_error_title,error=True,blocking=False)
  halt
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Primary twofg: ",twofg_product_code_arr[ON_DI_PRIMARY])
  end 
  local twofg_timeout=0
  while not(twofg_product_code_arr[ON_DI_SECONDARY]==twofg_DEVICE_ID_twofg7):
  sync()
  if(twofg_timeout>ON_INIT_TIMEOUT):
  popup(twofg_device_id_timeout,twofg_error_title,error=True,blocking=False)
  halt
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Secondary twofg: ",twofg_product_code_arr[ON_DI_SECONDARY])
  end 
  else:
  local twofg_timeout=0
  while not(twofg_product_code_arr[twofg_index]==twofg_DEVICE_ID_twofg7):
  sync()
  if(twofg_timeout>ON_INIT_TIMEOUT):
  popup(twofg_device_id_timeout,twofg_error_title,error=True,blocking=False)
  halt
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Single twofg: ",twofg_product_code_arr[twofg_index])
  end 
  end 
  sync()
  twofg_dataProcess_running=True
  sync()
  twofg_dataProcess_thrd=run twofg_dataProcess_thread()
  sync()
  twofg_monitor_thread_handle=run twofg_monitor_thread()
  sync()
  
  #======    End of OnRobot twofg Run    ======#
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: SensoPart-VisorRobotic, 1.5.0.0, SensoPart Industriesensorik GmbH
  #   Type: VISOR Robotic
  global sensopart_xmlrpc_server=rpc_factory("xmlrpc", "http://127.0.0.1:40404/RPC2")
  global visor_request_sending_success = False
  global visor_status_msg = "no status message available"
  global visor_response = "no response available"
  global visor_output_data = "no out put data available"
  global visor_request_success = False
  global visor_detector_success = False
  global visor_pose = p[0,0,0,0,0,0]
  local v_fiducial_pose_1 = p[0,0,0,0,0,0]
  local v_fiducial_pose_2 = p[0,0,0,0,0,0]
  local v_fiducial_pose_3 = p[0,0,0,0,0,0]
  local v_fiducial_pose_4 = p[0,0,0,0,0,0]
  local v_calibration_pose_1 = p[0,0,0,0,0,0]
  local v_calibration_pose_2 = p[0,0,0,0,0,0]
  local v_calibration_pose_3 = p[0,0,0,0,0,0]
  local v_calibration_pose_4 = p[0,0,0,0,0,0]
  local v_calibration_pose_5 = p[0,0,0,0,0,0]
  local v_calibration_pose_6 = p[0,0,0,0,0,0]
  local v_calibration_pose_7 = p[0,0,0,0,0,0]
  local v_calibration_pose_8 = p[0,0,0,0,0,0]
  local v_calibration_pose_9 = p[0,0,0,0,0,0]
  local v_calibration_pose_10 = p[0,0,0,0,0,0]
  local v_calibration_pose_11 = p[0,0,0,0,0,0]
  local v_calibration_pose_12 = p[0,0,0,0,0,0]
  local v_calibration_pose_13 = p[0,0,0,0,0,0]
  local v_calibration_pose_14 = p[0,0,0,0,0,0]
  local v_calibration_pose_15 = p[0,0,0,0,0,0]
  local v_calibration_pose_16 = p[0,0,0,0,0,0]
  local v_calibration_pose_17 = p[0,0,0,0,0,0]
  local v_calibration_pose_18 = p[0,0,0,0,0,0]
  local v_calibration_pose_19 = p[0,0,0,0,0,0]
  local v_calibration_pose_20 = p[0,0,0,0,0,0]
  local v_calibration_pose_21 = p[0,0,0,0,0,0]
  local v_calibration_pose_22 = p[0,0,0,0,0,0]
  local v_calibration_pose_23 = p[0,0,0,0,0,0]
  local v_calibration_pose_24 = p[0,0,0,0,0,0]
  local v_calibration_pose_25 = p[0,0,0,0,0,0]
  local v_calibration_pose_26 = p[0,0,0,0,0,0]
  local v_calibration_pose_27 = p[0,0,0,0,0,0]
  local v_calibration_pose_28 = p[0,0,0,0,0,0]
  local v_calibration_pose_29 = p[0,0,0,0,0,0]
  local v_calibration_pose_30 = p[0,0,0,0,0,0]
  def isVRequestSSuccessful():
  return visor_request_sending_success
  end
  def getVisorStatusMsg():
  return visor_status_msg
  end
  def getVisorResponse():
  return visor_response
  end
  def getVisorOutputData():
  return visor_output_data
  end
  def isVisorRequestSuccessful():
  return visor_request_success
  end
  def isVisorDetectorSuccessful():
  return visor_detector_success
  end
  def getVisorPose():
  return visor_pose
  end
  def getVisorStringOutput(data_index):
  return sensopart_xmlrpc_server.get_additionnal_info_as_string(0, data_index)
  end
  def getVisorIntegerOutput(data_index):
  return sensopart_xmlrpc_server.get_additionnal_info_as_number(0, data_index)
  end
  def sendVisorTerminalCmd(request):
  global visor_request_sending_success = sensopart_xmlrpc_server.send_request(0, request, False)
  textmsg("Request sent to VISOR: ",sensopart_xmlrpc_server.get_interpreted_cmd(0))
  textmsg("Response received from VISOR: ",sensopart_xmlrpc_server.get_response(0))
  global visor_status_msg = sensopart_xmlrpc_server.get_status_msg(0)
  global visor_response = sensopart_xmlrpc_server.get_response(0)
  global visor_output_data = sensopart_xmlrpc_server.get_output_data(0)
  global visor_request_success = sensopart_xmlrpc_server.is_request_successful(0)
  global visor_detector_success = sensopart_xmlrpc_server.is_detector_successful(0)
  local visor_tmp_pose = sensopart_xmlrpc_server.get_pose(0)
  global visor_pose = convertVisorPose(visor_tmp_pose)
  if visor_request_sending_success == False:
  popup(visor_status_msg,title="Request error",error=True,blocking=True)
  elif visor_request_success == False:
  popup(visor_status_msg,title="Request failed",warning=True,blocking=True)
  end
  return visor_request_sending_success
  end
  def convertVisorPose(pose_from_sensor):
  if (pose_from_sensor[0] == -1) and (pose_from_sensor[1] == -1) and (pose_from_sensor[2] == -1):
  return p[0,0,0,0,0,0]
  end
  local PosX = pose_from_sensor[0] / 1000000
  local PosY = pose_from_sensor[1] / 1000000
  local Angle = d2r(pose_from_sensor[2] / 1000)
  local new_robot_pose = p[PosX, PosY, 0, 0, 0, Angle]
  return new_robot_pose
  end
  def visor_terminal(device_index, request):
  global visor_request_sending_success = sensopart_xmlrpc_server.send_request(device_index, request, False)
  textmsg("Request sent to VISOR: ",sensopart_xmlrpc_server.get_interpreted_cmd(device_index))
  textmsg("Response received from VISOR: ",sensopart_xmlrpc_server.get_response(device_index))
  global visor_status_msg = sensopart_xmlrpc_server.get_status_msg(device_index)
  global visor_response = sensopart_xmlrpc_server.get_response(device_index)
  global visor_output_data = sensopart_xmlrpc_server.get_output_data(device_index)
  global visor_request_success = sensopart_xmlrpc_server.is_request_successful(device_index)
  global visor_detector_success = sensopart_xmlrpc_server.is_detector_successful(device_index)
  local visor_tmp_pose = sensopart_xmlrpc_server.get_pose(device_index)
  global visor_pose = convertVisorPose(visor_tmp_pose)
  if visor_request_sending_success == False:
  popup(visor_status_msg,title="Request error",error=True,blocking=True)
  elif visor_request_success == False:
  popup(visor_status_msg,title="Request failed",warning=True,blocking=True)
  end
  end
  def visor_change_job(device_index, job_index, is_change_permanent):
  global visor_request_sending_success = sensopart_xmlrpc_server.change_job(device_index, job_index, is_change_permanent)
  textmsg("Request sent to VISOR: ",sensopart_xmlrpc_server.get_interpreted_cmd(device_index))
  textmsg("Response received from VISOR: ",sensopart_xmlrpc_server.get_response(device_index))
  global visor_status_msg = sensopart_xmlrpc_server.get_status_msg(device_index)
  global visor_response = sensopart_xmlrpc_server.get_response(device_index)
  global visor_output_data = sensopart_xmlrpc_server.get_output_data(device_index)
  global visor_request_success = sensopart_xmlrpc_server.is_request_successful(device_index)
  global visor_detector_success = sensopart_xmlrpc_server.is_detector_successful(device_index)
  local visor_tmp_pose = sensopart_xmlrpc_server.get_pose(device_index)
  global visor_pose = convertVisorPose(visor_tmp_pose)
  if visor_request_sending_success == False:
  popup(visor_status_msg,title="Request error (change job)",error=True,blocking=True)
  elif visor_request_success == False:
  popup(visor_status_msg,title="Request failed (change job)",warning=True,blocking=True)
  end
  end
  def visor_trigger(device_index):
  global visor_request_sending_success = sensopart_xmlrpc_server.send_request(device_index, "TRX00", True)
  textmsg("Request sent to VISOR: ",sensopart_xmlrpc_server.get_interpreted_cmd(device_index))
  textmsg("Response received from VISOR: ",sensopart_xmlrpc_server.get_response(device_index))
  global visor_status_msg = sensopart_xmlrpc_server.get_status_msg(device_index)
  global visor_response = sensopart_xmlrpc_server.get_response(device_index)
  global visor_output_data = sensopart_xmlrpc_server.get_output_data(device_index)
  global visor_request_success = sensopart_xmlrpc_server.is_request_successful(device_index)
  global visor_detector_success = sensopart_xmlrpc_server.is_detector_successful(device_index)
  local visor_tmp_pose = sensopart_xmlrpc_server.get_pose(device_index)
  global visor_pose = convertVisorPose(visor_tmp_pose)
  if visor_request_sending_success == False:
  popup(visor_status_msg,title="Request error",error=True,blocking=True)
  elif visor_request_success == False:
  popup(visor_status_msg,title="Request failed",warning=True,blocking=True)
  end
  end
  def visor_calib_init(device_index):
  global visor_request_sending_success = sensopart_xmlrpc_server.send_request(device_index, "CCD", True)
  textmsg("Request sent to VISOR: ",sensopart_xmlrpc_server.get_interpreted_cmd(device_index))
  textmsg("Response received from VISOR: ",sensopart_xmlrpc_server.get_response(device_index))
  global visor_status_msg = sensopart_xmlrpc_server.get_status_msg(device_index)
  global visor_response = sensopart_xmlrpc_server.get_response(device_index)
  global visor_output_data = sensopart_xmlrpc_server.get_output_data(device_index)
  global visor_request_success = sensopart_xmlrpc_server.is_request_successful(device_index)
  global visor_detector_success = sensopart_xmlrpc_server.is_detector_successful(device_index)
  local visor_tmp_pose = sensopart_xmlrpc_server.get_pose(device_index)
  global visor_pose = convertVisorPose(visor_tmp_pose)
  if visor_request_sending_success == False:
  popup(visor_status_msg,title="Request error",error=True,blocking=True)
  elif visor_request_success == False:
  popup(visor_status_msg,title="Request failed",warning=True,blocking=True)
  end
  end
  def visor_add_calib_pt(device_index, pose_index, pos_x, pos_y, add_world_point):
  global visor_request_sending_success = sensopart_xmlrpc_server.add_calib_pt(device_index, pose_index, pos_x, pos_y, add_world_point)
  textmsg("Request sent to VISOR: ",sensopart_xmlrpc_server.get_interpreted_cmd(device_index))
  textmsg("Response received from VISOR: ",sensopart_xmlrpc_server.get_response(device_index))
  global visor_status_msg = sensopart_xmlrpc_server.get_status_msg(device_index)
  global visor_response = sensopart_xmlrpc_server.get_response(device_index)
  global visor_output_data = sensopart_xmlrpc_server.get_output_data(device_index)
  global visor_request_success = sensopart_xmlrpc_server.is_request_successful(device_index)
  global visor_detector_success = sensopart_xmlrpc_server.is_detector_successful(device_index)
  local visor_tmp_pose = sensopart_xmlrpc_server.get_pose(device_index)
  global visor_pose = convertVisorPose(visor_tmp_pose)
  if visor_request_sending_success == False:
  popup(visor_status_msg,title="Request error (add calib. point)",error=True,blocking=True)
  elif visor_request_success == False:
  popup(visor_status_msg,title="Request failed (add calib. point)",warning=True,blocking=True)
  end
  end
  def getVisorFiducialPose(index):
  if index == 1:
  return v_fiducial_pose_1
  end
  if index == 2:
  return v_fiducial_pose_2
  end
  if index == 3:
  return v_fiducial_pose_3
  end
  if index == 4:
  return v_fiducial_pose_4
  end
  return p[0,0,0,0,0,0]
  end
  def getVisorCalibrationPose(index):
  if index == 1:
  return v_calibration_pose_1
  end
  if index == 2:
  return v_calibration_pose_2
  end
  if index == 3:
  return v_calibration_pose_3
  end
  if index == 4:
  return v_calibration_pose_4
  end
  if index == 5:
  return v_calibration_pose_5
  end
  if index == 6:
  return v_calibration_pose_6
  end
  if index == 7:
  return v_calibration_pose_7
  end
  if index == 8:
  return v_calibration_pose_8
  end
  if index == 9:
  return v_calibration_pose_9
  end
  if index == 10:
  return v_calibration_pose_10
  end
  if index == 11:
  return v_calibration_pose_11
  end
  if index == 12:
  return v_calibration_pose_12
  end
  if index == 13:
  return v_calibration_pose_13
  end
  if index == 14:
  return v_calibration_pose_14
  end
  if index == 15:
  return v_calibration_pose_15
  end
  if index == 16:
  return v_calibration_pose_16
  end
  if index == 17:
  return v_calibration_pose_17
  end
  if index == 18:
  return v_calibration_pose_18
  end
  if index == 19:
  return v_calibration_pose_19
  end
  if index == 20:
  return v_calibration_pose_20
  end
  if index == 21:
  return v_calibration_pose_21
  end
  if index == 22:
  return v_calibration_pose_22
  end
  if index == 23:
  return v_calibration_pose_23
  end
  if index == 24:
  return v_calibration_pose_24
  end
  if index == 25:
  return v_calibration_pose_25
  end
  if index == 26:
  return v_calibration_pose_26
  end
  if index == 27:
  return v_calibration_pose_27
  end
  if index == 28:
  return v_calibration_pose_28
  end
  if index == 29:
  return v_calibration_pose_29
  end
  if index == 30:
  return v_calibration_pose_30
  end
  return p[0,0,0,0,0,0]
  end
  def visor_calibrate_calib_plate(device_index, store_in_flash, validate_calibration):
  global visor_request_sending_success = sensopart_xmlrpc_server.calibrate_calib_plate(device_index, store_in_flash, validate_calibration)
  textmsg("Request sent to VISOR: ",sensopart_xmlrpc_server.get_interpreted_cmd(device_index))
  textmsg("Response received from VISOR: ",sensopart_xmlrpc_server.get_response(device_index))
  global visor_status_msg = sensopart_xmlrpc_server.get_status_msg(device_index)
  global visor_response = sensopart_xmlrpc_server.get_response(device_index)
  global visor_output_data = sensopart_xmlrpc_server.get_output_data(device_index)
  global visor_request_success = sensopart_xmlrpc_server.is_request_successful(device_index)
  global visor_detector_success = sensopart_xmlrpc_server.is_detector_successful(device_index)
  local visor_tmp_pose = sensopart_xmlrpc_server.get_pose(device_index)
  global visor_pose = convertVisorPose(visor_tmp_pose)
  if visor_request_sending_success == False:
  popup(visor_status_msg,title="Request error (calibration)",error=True,blocking=True)
  elif visor_request_success == False:
  popup("Calibration unsuccessful",title="Request failed (calibration)",warning=True,blocking=True)
  else:
  popup("Check your results by clicking on the Calibrate node",title="Calibration successful",blocking=True)
  end
  end
  def visor_calibrate_point_pair_list(device_index, store_in_flash, validate_calibration):
  global visor_request_sending_success = sensopart_xmlrpc_server.calibrate_point_pair_list(device_index, store_in_flash, validate_calibration)
  textmsg("Request sent to VISOR: ",sensopart_xmlrpc_server.get_interpreted_cmd(device_index))
  textmsg("Response received from VISOR: ",sensopart_xmlrpc_server.get_response(device_index))
  global visor_status_msg = sensopart_xmlrpc_server.get_status_msg(device_index)
  global visor_response = sensopart_xmlrpc_server.get_response(device_index)
  global visor_output_data = sensopart_xmlrpc_server.get_output_data(device_index)
  global visor_request_success = sensopart_xmlrpc_server.is_request_successful(device_index)
  global visor_detector_success = sensopart_xmlrpc_server.is_detector_successful(device_index)
  local visor_tmp_pose = sensopart_xmlrpc_server.get_pose(device_index)
  global visor_pose = convertVisorPose(visor_tmp_pose)
  if visor_request_sending_success == False:
  popup(visor_status_msg,title="Request error (calibration)",error=True,blocking=True)
  elif visor_request_success == False:
  popup("Calibration unsuccessful",title="Request failed (calibration)",warning=True,blocking=True)
  else:
  popup("Check your results by clicking on the Calibrate node",title="Calibration successful",blocking=True)
  end
  end
  global visor_start_exit_pose = p[0,0,0,0,0,0]
  global visor_intermediate_pose = p[0,0,0,0,0,0]
  global visor_acquisition_pose = p[0,0,0,0,0,0]
  global visor_approach_pose = p[0,0,0,0,0,0]
  global visor_object_pose = p[0,0,0,0,0,0]
  global visor_gripping_pose = p[0,0,0,0,0,0]
  # end: URCap Installation Node
  global accel=0
  global blend_radius=0
  global move_type=0
  global speed=0
  global start=0
  global status=0
  global tool=0
  def sync_registers():
    $ 48 "sync_registers" "noBreak"
    $ 49 "sync()"
    sync()
    $ 50 "'outputs'"
    # 'outputs'
    $ 51 "write_output_integer_register(0, status)"
    write_output_integer_register(0, status)
    $ 53 "'inputs'"
    # 'inputs'
    $ 54 "move_type = read_input_integer_register(20)"
    move_type = read_input_integer_register(20)
    $ 55 "start = read_input_integer_register(1)"
    start = read_input_integer_register(1)
    $ 56 "'set targets'"
    # 'set targets'
    $ 57 "tmp≔[0,0,0,0,0,0]"
    global tmp=[0,0,0,0,0,0]
    $ 58 "tmp[0] = read_input_float_register(0)"
    tmp[0] = read_input_float_register(0)
    $ 59 "tmp[1] = read_input_float_register(1)"
    tmp[1] = read_input_float_register(1)
    $ 60 "tmp[2] = read_input_float_register(2)"
    tmp[2] = read_input_float_register(2)
    $ 61 "tmp[3] = read_input_float_register(3)"
    tmp[3] = read_input_float_register(3)
    $ 62 "tmp[4] = read_input_float_register(4)"
    tmp[4] = read_input_float_register(4)
    $ 63 "tmp[5] = read_input_float_register(5)"
    tmp[5] = read_input_float_register(5)
    $ 64 "tmpl_cartesian≔p[tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5]]"
    global tmpl_cartesian=p[tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5]]
    $ 65 "tmpl_joint≔[tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5]]"
    global tmpl_joint=[tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5]]
    $ 66 "tmpj_cartesian≔p[tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5]]"
    global tmpj_cartesian=p[tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5]]
    $ 67 "tmpj_joint≔[tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5]]"
    global tmpj_joint=[tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5]]
    $ 68 "'speed and acceleration variables'"
    # 'speed and acceleration variables'
    $ 69 "accel = read_input_float_register(20)"
    accel = read_input_float_register(20)
    $ 70 "speed = read_input_float_register(21)"
    speed = read_input_float_register(21)
    $ 71 "blend_radius = read_input_float_register(22)"
    blend_radius = read_input_float_register(22)
    $ 72 "var_1≔auto_init"
    global var_1=read_input_boolean_register(64)
    $ 73 "var_2≔auto_play"
    global var_2=read_input_boolean_register(65)
    $ 74 "sync()"
    sync()
  end
  def initialize_variables():
    $ 75 "initialize_variables" "noBreak"
    $ 76 "setp≔Tool_const"
    global setp=get_forward_kin()
    $ 77 "status≔0"
    global status=0
    $ 78 "start≔0"
    global start=0
    $ 79 "move_type≔0"
    global move_type=0
    $ 80 "speed≔0.0"
    global speed=0.0
    $ 81 "accel≔0.0"
    global accel=0.0
    $ 82 "blend_radius≔0.0"
    global blend_radius=0.0
    $ 83 "tool≔0"
    global tool=0
    $ 84 "var_1≔auto_init"
    global var_1=read_input_boolean_register(64)
    $ 85 "var_2≔auto_play"
    global var_2=read_input_boolean_register(65)
  end
  $ 2 "BeforeStart"
  $ 3 "rtde_set_watchdog('input_int_register_0', 2, 'PAUSE')"
  rtde_set_watchdog("input_int_register_0", 2, "PAUSE")
  $ 4 "Call initialize_variables"
  initialize_variables()
  $ 5 "Set"
  set_tcp(p[0.0,0.0,0.1566,0.0,0.0,0.0])
  $ 6 "Call sync_registers"
  sync_registers()
  $ 7 "Wait: 0.5"
  sleep(0.5)
  $ 44 "Thread_1"
  thread Thread_1():
    while (True):
      $ 45 "setp≔Tool_const"
      global setp=get_forward_kin()
      $ 46 "Loop"
      while (True):
        $ 47 "Call sync_registers"
        sync_registers()
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  while (True):
    $ 8 "Robot Program"
    $ 9 "sync()"
    sync()
    $ 10 "status = 1"
    status = 1
    $ 11 "Wait start == 1"
    while (not(start == 1)):
      sync()
    end
    $ 12 "status = 2"
    status = 2
    $ 13 "Switch move_type"
    switch_1 = move_type
    $ 14 "Case 1"
    if (1 == switch_1):
      # begin: URCap Program Node
      #   Source: OnRobot, 5.9.1, OnRobot A/S
      #   Type: 2FG Grip
      $ 15 "2FG Grip (20)"
on_return = twofg_grip(width=20.0, force=20, speed=64, external_grip=False, tool_index=0)
twofg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
      # end: URCap Program Node
      $ 16 "tool = 1"
      tool = 1
      $ 17 "write_output_integer_register(1, tool)"
      write_output_integer_register(1, tool)
      $ 18 "sync()"
      sync()
      $ 19 "Wait: 1.0"
      sleep(1.0)
    elif (2 == switch_1):
      $ 20 "Case 2"
      # begin: URCap Program Node
      #   Source: OnRobot, 5.9.1, OnRobot A/S
      #   Type: 2FG Release
      $ 21 "2FG Release (50)"
on_return = twofg_release(width=50.0, speed=20, external_release=False, tool_index=0 )
twofg_payload_set(mass = 0.0, tool_index = 0, use_guard = False)
      # end: URCap Program Node
      $ 22 "tool = 0"
      tool = 0
      $ 23 "write_output_integer_register(1, tool)"
      write_output_integer_register(1, tool)
      $ 24 "sync()"
      sync()
      $ 25 "Wait: 1.0"
      sleep(1.0)
    elif (3 == switch_1):
      $ 26 "Case 3"
      $ 27 "Popup: Warning!, movel movement with joint data could result in collisions,if isn't a mistake, you can skip this warning"
      popup("Warning!, movel movement with joint data could result in collisions,if isn't a mistake, you can skip this warning", "Warning", True, False, blocking=True)
      $ 28 "If tmpl_joint != [0,0,0,0,0,0]"
      if (tmpl_joint != [0,0,0,0,0,0]):
        $ 29 "movel(tmpl_joint,accel,speed,0,blend_radius)"
        movel(tmpl_joint,accel,speed,0,blend_radius)
      end
    elif (4 == switch_1):
      $ 30 "Case 4"
      $ 31 "If tmpl_cartesian != p[0,0,0,0,0,0]"
      if (tmpl_cartesian != p[0,0,0,0,0,0]):
        $ 32 "movel(tmpl_cartesian,accel,speed,0,blend_radius)"
        movel(tmpl_cartesian,accel,speed,0,blend_radius)
      end
    elif (5 == switch_1):
      $ 33 "Case 5"
      $ 34 "If tmpj_joint != [0,0,0,0,0,0]"
      if (tmpj_joint != [0,0,0,0,0,0]):
        $ 35 "movej(tmpj_joint,accel,speed,0,blend_radius)"
        movej(tmpj_joint,accel,speed,0,blend_radius)
      end
    elif (6 == switch_1):
      $ 36 "Case 6"
      $ 37 "Popup: Warning!, movej movement with cartesian data could result in collisions,if isn't a mistake, you can skip this warning"
      popup("Warning!, movej movement with cartesian data could result in collisions,if isn't a mistake, you can skip this warning", "Warning", True, False, blocking=True)
      $ 38 "If tmpj_cartesian != p[0,0,0,0,0,0]"
      if (tmpj_cartesian != p[0,0,0,0,0,0]):
        $ 39 "movej(tmpj_cartesian,accel,speed,0,blend_radius)"
        movej(tmpj_cartesian,accel,speed,0,blend_radius)
      end
    end
    $ 42 "status = 3"
    status = 3
    $ 43 "Wait start == 0"
    while (not(start == 0)):
      sync()
    end
  end
end
